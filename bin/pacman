#!/usr/bin/env node

var program  = require("commander"),
    _        = require('underscore')._,
    config   = require("../lib/config"),
    core     = require("../lib/core"),
    log      = require("../lib/log"),
    fss      = require("../lib/fss"),
    server   = require("../lib/server");

program
  .version(config.version)
  .option("-d, --dev",              "development mode: serve content directly")
  .option("-b, --build",            "build mode: build a complete version, with packed assets")
  .option("-s, --server",           "start a server from the build directory")
  .option("-t, --target  <value>",  "specify a different target directory (default ./public)")
  .option("-f, --from    <value>",  "specify a different source directory (default ./content)")
  .option("-c, --config  <value>",  "specify a different config file (default ./config.js)")
  .option("-p, --port    <value>",  "specify a different server port (default 3000)")
  .parse(process.argv);

/*
 * If no options are given, show the help prompt.
 */
if(!program.server && !program.dev && !program.build) {
  program.help();
}

/*
 * Overwrite the default config with custom command line configuration.
 */
config.silent = false;
config.extend(_.pick(program, [
  "source", "target", "port", "dev", "build", "server", "ignore"
]));

/*
 * Star the system in dev mode.
 */
var devmode = function() {
  log("Source", fss.baseRelative(config.appdir));
  server.dev();
  log();
};

/*
 * Start the system in build mode.
 */
var buildmode = function() {
  log("Source", fss.baseRelative(config.appdir));
  log("Target", fss.baseRelative(config.pubdir));
  core.regenAll();
  log();
};

/*
 * Decide what to do.
 */
log();
if(config.dev && !config.build) devmode();
if(config.server && !config.dev) server.build();
if(config.build) buildmode();
